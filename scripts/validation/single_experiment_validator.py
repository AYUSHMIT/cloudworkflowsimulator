"""

Script validating if the experiment meets simple straightforward conditions like:
  * task started before ended
  * transfer started before ended
  * vm was launched before being terminated
  * task/transfer/vm was started and was finished

Expected input is in parsed log format (generated by parse_experiment_log.py module).

"""

import sys
import parsed_log_loader

from scripts.log_parser.execution_log import EventType


def main():
    if len(sys.argv) != 2:
        print('Invalid number of params. 1 param expected (filename).')
        return

    filename = sys.argv[1]
    infile = open(filename, 'r')
    execution_log = parsed_log_loader.read_log(infile.read())
    infile.close()

    tasks = execution_log.events[EventType.TASK]
    transfers = execution_log.events[EventType.TRANSFER]
    vms = execution_log.events[EventType.VM]

    for task in tasks:
        result = validate_task(task)

        if not result.is_valid:
            print(result.message)

    for transfer in transfers:
        result = validate_transfer(transfer)

        if not result.is_valid:
            print(result.message)

    for vm in vms:
        result = validate_vm(vm)

        if not result.is_valid:
            print(result.message)


MISSING_VALUE = None


class EventValidationResult(object):
    def __init__(self, is_valid, message=''):
        self.is_valid = is_valid
        self.message = message


def validate_task(task):
    if task.started == MISSING_VALUE:
        return EventValidationResult(False, 'job {} hasn\'t started computation at all'.format(task.id))

    if task.finished == MISSING_VALUE:
        return EventValidationResult(False, 'job {} hasn\'t finished computation at all'.format(task.id))

    if not task.started <= task.finished:
        return EventValidationResult(False, 'job {} didn\'t hold time order'.format(task.id))

    return EventValidationResult(True)


def validate_transfer(transfer):
    if transfer.started == MISSING_VALUE:
        return EventValidationResult(False, 'transfer {} hasn\'t started at all'.format(transfer.id))

    if transfer.finished == MISSING_VALUE:
        return EventValidationResult(False, 'transfer {} hasn\'t finished at all'.format(transfer.id))

    if not transfer.started <= transfer.finished:
        return EventValidationResult(False, 'transfer {} didn\'t hold time order'.format(transfer.id))

    return EventValidationResult(True)


def validate_vm(vm):
    if vm.started == MISSING_VALUE:
        return EventValidationResult(False, 'VM {} hasn\'t been launched at all'.format(vm.id))

    if vm.finished == MISSING_VALUE:
        return EventValidationResult(False, 'VM {} hasn\'t been terminated at all'.format(vm.id))

    if not vm.started <= vm.finished:
        return EventValidationResult(False, 'VM {} provisioning didn\'t hold time order'.format(vm.id))

    return EventValidationResult(True)


if __name__ == '__main__':
    main()

