<project name="CloudWorkflowSimulator" default="dist" basedir=".">
  <description>
    Build ile for cloud-workflow-simulator. For some of the targets user must have required executor in PATH environment variable.
  </description>

  <!-- Set properties and paths
       ============================================================-->

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="bin"/>
    <property name="lib" location="lib"/>
  <property name="test.dir" location="test"/>
  <property name="testbuild" location="test_bin"/>
  <property name="script.dir" location="scripts"/>
  <property name="dist"  location="dist"/>

  <property name="test.data.dir" location="test_results"/>
  <property name="test.reports.dir" location="${test.data.dir}/reports"/>

    <manifest file="MANIFEST.MF">
        <!--default class of the jar to be loaded-->
        <attribute name="Main-Class"
                   value="cws.core.simulation.Simulation"/>
    </manifest>

  <path id="build.classpath">
    <fileset dir="lib" includes="*.jar"/>
  </path>

  <path id="testbuild.classpath">
    <fileset dir="lib" includes="*.jar"/>
    <pathelement path="${build}"/>
  </path>


  <!-- Classpath needs to include the libs, the cws classes and the
       tests classes -->
  <path id="test.classpath">
    <fileset dir="lib" includes="*.jar"/>
    <pathelement path="${build}"/>
    <pathelement path="${java.class.path}"/>
    <pathelement path="${testbuild}"/>
  </path>


  <!-- Build commands
       ============================================================-->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${testbuild}"/>
    <!-- Create directories for test output -->
    <mkdir dir="${test.data.dir}"/>
    <mkdir dir="${test.reports.dir}"/>

    <!-- Dir for output from SimulationTest -->
    <mkdir dir="${test.data.dir}/SimulationTest"/>

  </target>


  <target name="compile" depends="init"
          description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" classpathref="build.classpath"
           includeantruntime="false" source="6" target="6"/>
  </target>


  <target name="dist" depends="compile"
          description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>

    <!-- Put everything in ${build} into the jar file -->
    <jar jarfile="${dist}/cloudworkflowsimulator.jar" basedir="${build}"/>
  </target>

    <target name="dist-fat-jar" depends="compile"
            description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>

        <!-- Put everything in ${build} into the jar file and include every library from ${lib} as well -->
        <jar jarfile="${dist}/cloudworkflowsimulator-fat.jar" basedir="${build}" manifest="MANIFEST.MF">
            <zipgroupfileset dir="${lib}" includes="**/*.jar"/>
        </jar>
    </target>

  <target name="test-build" depends="compile"
          description="build the java unit and integration tests" >
    <javac srcdir="${test.dir}"
           destdir="${testbuild}"
           classpathref="testbuild.classpath"
           includeantruntime="false" />

    <javac srcdir="integration_test"
           destdir="${testbuild}"
           classpathref="testbuild.classpath"
           includeantruntime="false" />
  </target>



  <target name="test-java" depends="compile,test-build"
          description="run the java unit and integration tests" >

    <junit printsummary="yes"
           haltonfailure="no"
           errorProperty="test.failed"
           failureProperty="test.failed"
           fork="true"
           forkMode="once">

      <!-- Forking once allows ant to automatically set the classpath so
           that it can find the required junit and ant files. -->

      <classpath refid="test.classpath" />

      <!-- Find and run tests in 'test' and 'integration_test' dirs -->
      <batchtest todir="${test.data.dir}">
        <!-- Exclude abstract classes -->
        <fileset dir="${test.dir}" includes="**/*Test.java"
                 excludes="**/StorageManagerTest.java,
                           **/VMCacheManagerTest.java,
                           **/DAGDynamicSchedulerStorageAwareTest.java"/>

        <fileset dir="integration_test" includes="**/*Test.java"/>
      </batchtest>

      <!-- Dump xml output to file -->
      <formatter type="xml"/>
    </junit>


    <!-- Make pretty html output from the xml files -->
    <junitreport todir="${test.data.dir}">
      <fileset dir="${test.data.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports.dir}"/>
    </junitreport>


    <!-- Report failures -->
    <fail if="test.failed">
      Unit tests failed. Check ${test.reports.dir}/index.html for details.
    </fail>

  </target>


  <target name="test-python" description="run python tests">
    <exec executable="/usr/bin/python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="validation.single_task_validator_test"/>
    </exec>
    <exec executable="/usr/bin/python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="validation.order_validator_test"/>
    </exec>
    <exec executable="/usr/bin/python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="validation.simulation_validator_test"/>
    </exec>
    <exec executable="/usr/bin/python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="validation.constraints_validator_test"/>
    </exec>
    <exec executable="/usr/bin/python"  dir="${script.dir}">
      <arg line="-m"/>
      <arg line="log_parser.parse_experiment_log_test "/>
    </exec>
  </target>

  <!-- Run all tests -->
  <target name="test" depends="test-java,test-python" description="build and run all tests" />

  <!-- Run a single test -->
  <target name="runtest" description="Runs the test you specify on the command line with -Dtest="
          depends="compile, test-build, ensure-test-name">
    <junit printsummary="withOutAndErr" fork="yes">
      <classpath refid="test.classpath" />
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/${ttr}.java"/>
        </fileset>
        <fileset dir="integration_test">
          <include name="**/${ttr}.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- For single test make sure we have passed the argument -->
  <target name="ensure-test-name" unless="ttr">
    <fail message="You must run this target with -Dttr=TestName"/>
  </target>

  <!-- Simulator related targets to make it easier for user -->
  <target name="run-sim-locally-defaults"
          depends="compile, ensure-input-dir"
          description="runs simulation locally on GENOME workflows with default params">
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="${script.dir}/runners/run_simulation_locally.sh &quot;--application GENOME --input-dir ${indir} --output-file ${out} --distribution pareto_unsorted --algorithm SPSS --storage-manager void --ensemble-size 20&quot;"/>
    </exec>
  </target>

  <target name="run-sim-locally"
          depends="compile, ensure-input-dir, ensure-application-type, ensure-distribution-type, ensure-algo, ensure-ensemble-size, ensure-storage-manager-type"
          description="runs simulation locally">
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="${script.dir}/runners/run_simulation_locally.sh &quot;--application ${app} --input-dir ${indir} --output-file ${out} --distribution ${distr} --algorithm ${algo} --storage-manager ${storagemng} --ensemble-size ${ensemblesize} --scaling-factor ${scalingfactor} --seed ${seed} --storage-cache ${storagecache} --enable-logging ${enablelog} --log-to-stdout ${stdoutlog} --n-budgets ${budgets} --n-deadlines ${deadlines} --vm-type-selection ${vmtypeselection}&quot;"/>
    </exec>
  </target>

  <target name="preprocess-test-results"
          depends="ensure-raw-log-file, ensure-preprocessed-log-file"
          description="preprocesses test results">
    <exec executable="python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="log_parser.parse_experiment_log ../${rawlog} ../${preprocessedlog}"/>
    </exec>
  </target>

  <target name="validate-test-result"
          depends="ensure-preprocessed-log-file"
          description="validates preprocessed test results">
    <exec executable="python" dir="${script.dir}">
      <arg line="-m"/>
      <arg line="validation.experiment_validator ../${preprocessedlog}"/>
    </exec>
  </target>

  <target name="visualize-scheduling-process-defaults"
          depends="ensure-preprocessed-log-file, ensure-graph-file"
          description="visualizes scheduling process of simulation">
    <exec executable="ruby" dir="${script.dir}/visualisation">
      <arg line="plot_gantt.rb results ../../${preprocessedlog} ../../${graph}"/>
    </exec>
  </target>

  <target name="visualize-storage-demand-defaults"
          depends="ensure-preprocessed-log-file, ensure-graph-file"
          description="visualizes storage demand of simulation">
    <exec executable="ruby" dir="${script.dir}/visualisation">
      <arg line="plot_storage.rb number ../../${preprocessedlog} ../../${graph}"/>
    </exec>
  </target>

  <target name="preprocess-validate-visualize-scheduling-process-and-storage-demand"
          depends="preprocess-test-results, validate-test-result, visualize-scheduling-process-defaults, visualize-storage-demand-defaults"
          description="runs preprocessing, validating and visualizing.">
  </target>

  <!-- Make sure some tasks are passed proper arguments. -->
  <target name="ensure-raw-log-file" unless="rawlog">
    <fail message="You must run this target with -Drawlog=name-of-log-file-to-preprocess"/>
  </target>

  <target name="ensure-preprocessed-log-file" unless="preprocessedlog">
    <fail message="You must run this target with -Dpreprocessedlog=name-of-preprocessed-log-file"/>
  </target>

  <target name="ensure-input-dir" unless="indir">
    <fail message="You must run this target with -Dindir=input-directory-of-dags"/>
  </target>

  <target name="ensure-graph-file" unless="graph">
    <fail message="You must run this target with -Dgraph=output-graph-file"/>
  </target>

  <target name="ensure-application-type" unless="app">
    <fail message="You must run this target with -Dapp=[GENOME/CYBERSHAKE/LIGO/MONTAGE/SIPHT]"/>
  </target>

  <target name="ensure-distribution-type" unless="distr">
    <fail message="You must run this target with -Ddistr=[pareto_unsorted/..?]"/>
  </target>

  <target name="ensure-algo" unless="algo">
    <fail message="You must run this target with -Dalgo=[SPSS/DPDS/WADPDS]"/>
  </target>

  <target name="ensure-ensemble-size" unless="ensemblesize">
    <fail message="You must run this target with -Densemblesize=number-in-range-of-0-to-30"/>
  </target>

  <target name="ensure-storage-manager-type" unless="storagemng">
    <fail message="You must run this target with -Dstoragemng=[void/fifo]"/>
  </target>

  <target name="clean"
          description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${testbuild}"/>
  </target>
</project>
